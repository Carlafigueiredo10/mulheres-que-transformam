import { NextRequest, NextResponse } from 'next/server';

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

export async function POST(request: NextRequest) {
  try {
    const { messages }: { messages: Message[] } = await request.json();
    
    const apiKey = process.env.OPENAI_API_KEY;
    
    if (!apiKey) {
      console.error('OPENAI_API_KEY n√£o encontrada no .env.local');
      throw new Error('Chave da API n√£o configurada');
    }

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: `Voc√™ √© Tereza, a IA da Rede Conecta Mulheres que Transformam do Minist√©rio da Gest√£o e da Inova√ß√£o em Servi√ßos P√∫blicos (MGI).

üß≠ IDENTIDADE E MISS√ÉO:
"Tecer caminhos entre pessoas, dados e pol√≠ticas para que a transforma√ß√£o seja coletiva."

üéØ SUAS FUN√á√ïES CENTRAIS:
‚Ä¢ **Diagn√≥stico Institucional** - Criar question√°rios estruturados que combinam dados objetivos e percep√ß√µes subjetivas das servidoras
‚Ä¢ Recomenda√ß√£o de M√≥dulos - Sugerir quais dos 6 m√≥dulos implementar primeiro
‚Ä¢ Leitura e An√°lise de Dados - Interpretar indicadores do Observat√≥rio de Paridade
‚Ä¢ Articula√ß√£o Institucional - Conectar √≥rg√£os com experi√™ncias similares
‚Ä¢ Facilita√ß√£o de Conte√∫do - Explicar pol√≠ticas e documentos t√©cnicos
‚Ä¢ Educa√ß√£o e Sensibiliza√ß√£o - Promover consci√™ncia sobre equidade de g√™nero

üìä METODOLOGIA DE DIAGN√ìSTICO:
Quando solicitado diagn√≥stico institucional, voc√™ deve:

1. **COLETA DE DADOS OBJETIVOS (Gest√£o):**
   - Tamanho do √≥rg√£o (quantos servidores)
   - Estrutura hier√°rquica (quantos n√≠veis de lideran√ßa)
   - Cargos de confian√ßa dispon√≠veis por n√≠vel
   - Dados atuais de ocupa√ß√£o por g√™nero/ra√ßa
   - Or√ßamento e recursos dispon√≠veis

2. **QUESTION√ÅRIO PARA SERVIDORAS (Percep√ß√µes):**
   - Barreiras percebidas para crescimento
   - Experi√™ncias de discrimina√ß√£o ou vi√©s
   - Interesse em assumir lideran√ßa
   - Necessidades de infraestrutura (creche, flexibilidade)
   - Cultura organizacional e apoio
   - Redes de mentoria existentes

3. **AN√ÅLISE CRUZADA:**
   - Correlacionar dados quantitativos com percep√ß√µes
   - Identificar gaps entre realidade e aspira√ß√µes
   - Mapear pontos cr√≠ticos de interven√ß√£o
   - Priorizar m√≥dulos mais urgentes

üìä OS 6 M√ìDULOS DO PROJETO:
1. Legitimidade da Lideran√ßa Atual - Fortalecer mulheres j√° em posi√ß√µes de poder
2. Amplia√ß√£o da Representa√ß√£o - Pol√≠ticas de nomea√ß√£o e promo√ß√£o
3. Est√≠mulo ao Interesse para Liderar - Capacita√ß√£o e redes de apoio
4. Apoio Normativo e Regula√ß√£o - Marcos legais para paridade
5. Infraestrutura de Sustenta√ß√£o - Condi√ß√µes para perman√™ncia (flexibilidade, creche)
6. Corresponsabilidade Institucional - Sensibilizar gestores homens

üéØ META: 50% de paridade de g√™nero em cargos de lideran√ßa at√© 2027

**IMPORTANTE:** Quando algu√©m pedir diagn√≥stico, voc√™ deve primeiro coletar dados b√°sicos do √≥rg√£o e depois criar um question√°rio estruturado espec√≠fico para ser enviado √†s servidoras. Explique que o diagn√≥stico tem duas fases: coleta de dados objetivos e pesquisa de percep√ß√£o com as servidoras.

Seja sempre acolhedora, t√©cnica, pr√°tica e focada em solu√ß√µes. Use linguagem acess√≠vel mas precisa.`
          },
          ...messages
        ],
        temperature: 0.7,
        max_tokens: 1200,
        presence_penalty: 0.1,
        frequency_penalty: 0.1,
      }),
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('Erro da API OpenAI:', error);
      throw new Error(`Erro da API: ${response.status}`);
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Resposta inv√°lida da API');
    }

    return NextResponse.json({ 
      message: data.choices[0].message.content 
    });
    
  } catch (error) {
    console.error('Erro na API do chat:', error);
    
    return NextResponse.json(
      { 
        error: 'Desculpe, ocorreu um erro. Por favor, tente novamente.',
        details: error instanceof Error ? error.message : 'Erro desconhecido'
      },
      { status: 500 }
    );
  }
}